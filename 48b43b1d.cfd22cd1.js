(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(3),l=n(7),i=(n(0),n(92)),o={id:"list-dsl",title:"List DSL",sidebar_label:"List DSL"},r={unversionedId:"list-dsl",id:"list-dsl",isDocsHomePage:!1,title:"List DSL",description:"The Models list DSL is used to customise the model index that is generated for each model. The list DSL has quite a few options, as the model index is highly customizable.",source:"@site/docs/list-dsl.md",slug:"/list-dsl",permalink:"/docs/list-dsl",editUrl:"https://github.com/linzjs/linz/tree/master/docusaurus/docs/list-dsl.md",version:"current",sidebar_label:"List DSL",sidebar:"sidebar",previous:{title:"API",permalink:"/docs/api"},next:{title:"Form DSL",permalink:"/docs/form-dsl"}},b=[{value:"list.actions",id:"listactions",children:[]},{value:"list.export",id:"listexport",children:[]},{value:"list.fields",id:"listfields",children:[]},{value:"list.filters",id:"listfilters",children:[]},{value:"list.groupActions",id:"listgroupactions",children:[]},{value:"list.help",id:"listhelp",children:[]},{value:"list.paging",id:"listpaging",children:[]},{value:"list.recordActions",id:"listrecordactions",children:[]},{value:"list.showSummary",id:"listshowsummary",children:[]},{value:"list.sortBy",id:"listsortby",children:[]},{value:"list.toolbarItems",id:"listtoolbaritems",children:[]}],c={rightToc:b};function s(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The Models list DSL is used to customise the model index that is generated for each model. The list DSL has quite a few options, as the model index is highly customizable."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list")," should be an object, containing the following top-level keys:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"actions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"export")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fields")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"groupActions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"help")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"paging")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"recordActions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"showSummary")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"sortBy")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"toolbarItems"))),Object(i.b)("p",null,"These allow you to describe how the model index should function."),Object(i.b)("h2",{id:"listactions"},"list.actions"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.actions")," should be an Array of Objects. Each object describes an action that a user can make, at the model level. Each action should be an Object with the following keys:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"label")," is the name of the action."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"action")," is the last portion of a URL, which is used to perform the action."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"modal")," optionally render the results in a modal view.")),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"actions: [\n    {\n        label: 'Import people',\n        action: 'import-from-csv',\n        modal: true,\n    },\n];\n")),Object(i.b)("p",null,"This will generate a button, on the model index, next to the model label. Multiple actions will produce a button titled ",Object(i.b)("em",{parentName:"p"},"Actions")," with a drop-down list attached to it, containing all possible actions."),Object(i.b)("p",null,"The evaluated string ",Object(i.b)("inlineCode",{parentName:"p"},"/{linz-admin-path}/model/{model-name}/action/{action.action}")," will be prefixed to the value provided for ",Object(i.b)("inlineCode",{parentName:"p"},"action")," to generate a URL, for example ",Object(i.b)("inlineCode",{parentName:"p"},"/admin/model/person/import-from-csv"),". It is the developers responsibility to mount the ",Object(i.b)("inlineCode",{parentName:"p"},"GET")," route using Express, and respond to it accordingly."),Object(i.b)("p",null,"The actions will be rendered in the order they're provided."),Object(i.b)("p",null,"If using a modal, make sure the HTML returned from the route starts with ",Object(i.b)("inlineCode",{parentName:"p"},'<div class="modal-dialog"><div class="modal-content"></div></div>'),"."),Object(i.b)("h2",{id:"listexport"},"list.export"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.export")," is used to denote that a particular model is exportable. Linz takes care of the exporting for you, unless you want to provide a custom action to handle it yourself."),Object(i.b)("p",null,"When a user clicks on an export, they'll be provided a pop-up modal asking them to choose and order the fields they'd like to export."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.export")," should be an Array of Objects. Each object describes an export option, for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"export: [\n    {\n      label: 'Choose fields to export',\n      inclusions: 'dateModified,dateCreated',\n      dateFormat: linz.get('date format'),\n      useLocalTime: false,\n      modal: false,\n    }\n]\n")),Object(i.b)("p",null,"Each object should contain the following keys:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"label")," which is the name of the export."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"inclusions")," which is a list of fields that can be exported."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dateFormat")," which allows you to format the exported dates using moment date formats. (Defaults to false)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"useLocalTime")," which allows you to export date fields in the browsers timezone offset."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"modal")," optionally render the results in a modal view.")),Object(i.b)("p",null,"If you'd like to provide your own export route, you can. Replace the ",Object(i.b)("inlineCode",{parentName:"p"},"inclusions")," key with an ",Object(i.b)("inlineCode",{parentName:"p"},"action")," key that works the same as ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#listactions"}),"list.actions"),". Rather than a modal, a request to that route will be made. You're responsible for mounting a ",Object(i.b)("inlineCode",{parentName:"p"},"GET")," route in Express to respond to it."),Object(i.b)("h2",{id:"listfields"},"list.fields"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.fields")," is used to customize the fields that appear in the listing on the model index."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.fields")," should be an Object, keyed by each field in your model. The value for each key should be ",Object(i.b)("inlineCode",{parentName:"p"},"true")," to include the field or ",Object(i.b)("inlineCode",{parentName:"p"},"false")," to exclude the field. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"fields: {\n    name: true,\n    username: true\n}\n")),Object(i.b)("p",null,"Linz will convert the above into the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"fields: {\n    name: {\n        label: 'Name',\n        renderer: linz.formtools.cellRenderers.default\n    },\n    username: {\n        label: 'Username',\n        renderer: linz.formtools.cellRenderers.default\n    }\n}\n")),Object(i.b)("p",null,"If you like, you can pass an object rather than the boolean. This also allows you to customize the cell renderer used to display the data within the column."),Object(i.b)("p",null,"If you provide a ",Object(i.b)("inlineCode",{parentName:"p"},"label"),", it will override what is defined in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"./models#models-label-dsl"}),"Models label DSL"),"."),Object(i.b)("p",null,"The fields will be rendered in the order they're provided."),Object(i.b)("h2",{id:"listfilters"},"list.filters"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.filters")," can be used to include filters which will alter the data included in the dataset for a particular model. Filters can contain a custom user interface, but Linz comes with a standard set of filters."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.filters")," should be an object, keyed by each field in your model. Each object must contain a filter, which should be an object adhering to the Linz model filter DSL. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"filters: {\n    dateModified: {\n        alwaysOn: true,\n        filter: linz.formtools.filters.dateRange,\n    }\n}\n")),Object(i.b)("p",null,"The above will allow your model to be filtered by a date range filter, on the ",Object(i.b)("inlineCode",{parentName:"p"},"dateModified")," property."),Object(i.b)("p",null,"Each filter, keyed by the field name, can have the following keys:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"alwaysOn")," will ensure that the filter is always rendered in the list view."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"default")," allows you to provide a default value for the filter. It only takes affect when using ",Object(i.b)("inlineCode",{parentName:"li"},"alwaysOn"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filter")," this is optional, but allows you to specify a filter and should point to a Linz filter, or your own custom one."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"once")," will ensure that a user can only add that filter once (works well with the ",Object(i.b)("inlineCode",{parentName:"li"},"boolean")," filter).")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Be aware of the ",Object(i.b)("inlineCode",{parentName:"p"},"default")," values. Because of Linz's internal query structure most filters will need to provide the ",Object(i.b)("inlineCode",{parentName:"p"},"default")," value as an array, but there are some exceptions.")),Object(i.b)("p",null,"Below is an example of the ",Object(i.b)("inlineCode",{parentName:"p"},"default")," data type for each filter:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dateRange"),": ",Object(i.b)("inlineCode",{parentName:"li"},"{ dateFrom: [ '2017-10-15' ], dateTo: [ '2017-10-28' ] }")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"date"),": ",Object(i.b)("inlineCode",{parentName:"li"},"['2017-10-01']")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"boolean"),": ",Object(i.b)("inlineCode",{parentName:"li"},"true")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"default"),", ",Object(i.b)("inlineCode",{parentName:"li"},"fulltext"),", ",Object(i.b)("inlineCode",{parentName:"li"},"list"),": ",Object(i.b)("inlineCode",{parentName:"li"},"['string']")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"number"),": ",Object(i.b)("inlineCode",{parentName:"li"},"[4]"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"View the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/linzjs/linz/tree/master/lib/formtools/filters"}),"complete list of Linz filters"),".")),Object(i.b)("h2",{id:"listgroupactions"},"list.groupActions"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.groupActions")," can be used to define certain actions that are only available once a subset of data has been chosen."),Object(i.b)("p",null,"Each record displayed on a model index has a checkbox, checking two or more records creates a group. If ",Object(i.b)("inlineCode",{parentName:"p"},"groupActions")," have been defined for that model, those actions will become choosable by the user."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.groupActions")," should be an Array of Objects. Each object describes an action that a user can make, and the object takes on the same form as those described in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#listactions"}),"list.actions"),"."),Object(i.b)("p",null,"You're responsible for mounting a ",Object(i.b)("inlineCode",{parentName:"p"},"GET")," route in Express to respond to it."),Object(i.b)("h2",{id:"listhelp"},"list.help"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"list.help")," key can be used to provide information for a particular model. The information will appear in a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://getbootstrap.com/docs/3.3/javascript/#popovers"}),"Bootstrap popover"),"."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"list.help")," key accepts either ",Object(i.b)("inlineCode",{parentName:"p"},"false"),", or a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://getbootstrap.com/docs/3.3/javascript#popovers-options"}),"Bootstrap popovers options object"),"."),Object(i.b)("h2",{id:"listpaging"},"list.paging"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.paging")," can be used to customise the paging controls for the model index. Paging controls will only be shown when the number of results for a model index, are greater than the per page total."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.paging")," should be an Object, with the following keys:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"active")," is an optional Boolean used to turn paging on or off. It defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"size")," is the default page size. It defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"20"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"sizes")," is an Array of the page sizes available for a user to choose from on the model index. It defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"[20, 50, 100, 200]"),".")),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"  paging: {\n    active: true,\n    size: 50,\n    sizes: [50, 100, 150, 200]\n  }\n")),Object(i.b)("p",null,"If you don't provide a paging object it defaults to:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"  paging: {\n    active: true,\n    size: 20,\n    sizes: [20, 500, 100, 200]\n  }\n")),Object(i.b)("h2",{id:"listrecordactions"},"list.recordActions"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.recordActions")," can be used to customise record specific actions. These are actions that act upon a specific model record. The actions appear as buttons for each record in a model list. The buttons can either appear in a drop-down list, or next to the edit and delete buttons for the record."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.recordActions")," should be an Array of Objects. Each object describes an action that a user can make, specific to the record, and the object takes on the same form as those described in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#listactions"}),"list.actions"),"."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.recordActions")," can have an optional key ",Object(i.b)("inlineCode",{parentName:"p"},"type")," and when set to ",Object(i.b)("inlineCode",{parentName:"p"},"primary"),", the action will be renderered next to the edit and delete buttons for the record (i.e. not within the dropdown). You can also supply a key ",Object(i.b)("inlineCode",{parentName:"p"},"icon"),", which if supplied, will be used rather than a label for the button. The value for ",Object(i.b)("inlineCode",{parentName:"p"},"icon")," should correspond with name of a Bootstrap glyphicon."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.recordActions")," can also accept a function, as the value to a ",Object(i.b)("inlineCode",{parentName:"p"},"disabled")," property. If provided, the function will be excuted with the following signature ",Object(i.b)("inlineCode",{parentName:"p"},"disabled (record, callback)"),". The callback has the following signature ",Object(i.b)("inlineCode",{parentName:"p"},"callback (error, isDisabled, message)"),". ",Object(i.b)("inlineCode",{parentName:"p"},"isDisabled")," should be a boolean. ",Object(i.b)("inlineCode",{parentName:"p"},"true")," to disable the record action, ",Object(i.b)("inlineCode",{parentName:"p"},"false")," to enable it and you can provide a message if the action is to be disabled."),Object(i.b)("p",null,"You're responsible for mounting a ",Object(i.b)("inlineCode",{parentName:"p"},"GET")," route in Express to respond to it."),Object(i.b)("h2",{id:"listshowsummary"},"list.showSummary"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.showSummary")," can be used to include or exclude the paging controls from a model index."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.showSummary")," expects a boolean. Truthy/falsy values will also be interpreted, for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"showSummary: true;\n")),Object(i.b)("h2",{id:"listsortby"},"list.sortBy"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.sortBy")," is used to customise the sort field(s) which the data in the model index will be retrieved with."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.sortBy")," should be Array of field names or objects. If using an object, the field property is required for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"sortBy: [\n    'name',\n    'username',\n    {\n        defaultOrder: 'asc',\n        field: 'dateModified',\n        label: 'Date modified',\n    },\n];\n")),Object(i.b)("p",null,"This Array will be used to populate a drop-down list on the model index. The user can choose an option from the drop-down to sort the list with."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"defaultOrder")," property is used to set the default ordering of the sort. You may want to change it to ",Object(i.b)("inlineCode",{parentName:"p"},"desc")," when you want the latest records first."),Object(i.b)("h2",{id:"listtoolbaritems"},"list.toolbarItems"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.toolbarItems")," can be used to provide completely customised content on the toolbar of a model index. The toolbar on the model index sits directly to the right of the Model label, and includes action buttons and drop-downs."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"list.toolbarItems")," should be an Array of Objects. Each object should provide a ",Object(i.b)("inlineCode",{parentName:"p"},"render")," key with the value of a Function. The function will be executed to retrieve HTML to be placed within the toolbar. The function will be provided the request ",Object(i.b)("inlineCode",{parentName:"p"},"req"),", the response object ",Object(i.b)("inlineCode",{parentName:"p"},"res")," and callback function which should be executed with the HTML. The callback function has the signature ",Object(i.b)("inlineCode",{parentName:"p"},"callback(err, html)")," For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"toolbarItems: [\n    {\n        renderer: function(req, res, cb) {\n            let locals = {};\n            return cb(null, templates.render('toolbarItems', locals));\n        },\n    },\n];\n")))}s.isMDXComponent=!0},92:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),l=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=l.a.createContext({}),s=function(e){var t=l.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},u=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,m=d["".concat(o,".").concat(u)]||d[u]||p[u]||i;return n?l.a.createElement(m,r(r({ref:t},c),{},{components:n})):l.a.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var r={};for(var b in t)hasOwnProperty.call(t,b)&&(r[b]=t[b]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var c=2;c<i;c++)o[c]=n[c];return l.a.createElement.apply(null,o)}return l.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);