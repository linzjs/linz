extends modal

block content
	form.exportForm(role='form', action=linz.api.getAdminLink(model, modelExport.action), method='post', target='_blank')
		div.modal-header
			button.close(type='button', data-dismiss='modal' aria-hidden='true') &times;
			h4#myModalLabel.modal-title!= modelExport.label
		div.modal-body
			div.modal-footer.actions
				button.btn.btn-default(type='button', class='pull-left', data-linz-control="checked-all") Select <b>all</b>
				button.btn.btn-default(type='button', class='pull-left', data-linz-control="reset-export") Reset
				button.btn.btn-primary(type='submit', data-linz-control='export-save') Export
				button.btn.btn-default(type='button', data-dismiss='modal') Cancel

			input(type='hidden', name='modelName', value=model.modelName)
			input(type='hidden', name='selectedIds', data-export='ids')
			input(type='hidden', name='selectedFields', data-export='fields')
			input(type='hidden', name='modelQuery', data-export='modelQuery')

			p Drag and drop to re-order the fields.

			ul.exportFields.list-group.clearfix

		div.modal-footer
			button.btn.btn-primary(type='submit', data-linz-control='export-save') Export
			button.btn.btn-default(type='button', data-dismiss='modal') Cancel

	script(src='' + linz.get('admin path') + '/public/js/jquery-ui.min.js')
	script.

		(function () {

			var fields = !{JSON.stringify(modelExport.fields)},
				exportCookieName = !{JSON.stringify(model.modelName)} + '_' + 'selectedExportFields',
				savedFields = mergeFields(getCookie(exportCookieName), fields),
				bSelectAll = true;

			drawExportList(savedFields);

			$('[data-linz-control="checked-all"]', $('.exportForm')).click(function () {

				$('input[data-linz-control="export-field"]', $('.exportForm')).prop('checked',bSelectAll);

				bSelectAll = !bSelectAll;

				if (bSelectAll) {
					$(this).find('b').html('all');
				} else {
					$(this).find('b').html('none');
				}

			});

			$('[data-linz-control="reset-export"]', $('.exportForm')).click(function () {

				var defaultFields = mergeFields('', fields);
				drawExportList(defaultFields);
				addExportFieldsToCookies();

			});

			$('[data-linz-control="export-save"]', $('.exportForm')).click(function () {

				if (!$('input[data-linz-control="export-field"]:checked', $('.exportForm')).length) {
					alert('Please select one or more fields from below to export.');
					return false;
				}

				// close modal
				$('#exportModal').modal('hide');

				return true;

			});

			$('.exportFields').sortable({
				update: function( event, ui ) {
					addExportFieldsToCookies();
				}
			});

			$('.exportForm').submit(function (event){

				$('[data-export="fields"]').val(getSelectedExportFields().join());

			});

			function drawExportList (list) {

				var html = '';

				list.forEach( function (field) {

					html += '<li class="list-group-item">'
								+ '<div class="checkbox">'
									+ '<label>'
										+ '<input type="checkbox" value="' + field.value + '" data-linz-control="export-field"' + (field.selected ? ' checked' : '') + '> ' + field.label;

				});

				$('.exportFields').html(html);

				$('input[data-linz-control="export-field"]', $('.exportForm')).click(function () {

					addExportFieldsToCookies();

					var selectedFields = mergeFields(getCookie(exportCookieName), fields);
					drawExportList(selectedFields);

				});

			}

			function getSelectedExportFields () {

				var selectedFields = [];

				$('input[data-linz-control="export-field"]:checked', $('.exportForm')).each(function () {
					selectedFields.push($(this).val());
				});

				return selectedFields;
			}

			function addExportFieldsToCookies () {

				setCookie(exportCookieName, getSelectedExportFields(), 30);
			}

			function mergeFields (selections, master) {

				var mergedFields = [];

				if (selections.length) {

					selections = selections.split(',');

					selections.forEach(function (fieldName) {
						mergedFields.push({
							label: master[fieldName] || fieldName,
							value: fieldName,
							selected: true
						});
					});

				}

				Object.keys(master).forEach(function (fieldName) {

					if (selections.indexOf(fieldName) >= 0) {
						// field exists, exit!
						return;
					}

					mergedFields.push({
						label: master[fieldName] || fieldName,
						value: fieldName,
						selected: false
					});
				});

				return mergedFields;

			}

			function setCookie(cname, cvalue, exdays) {
				var d = new Date();
				d.setTime(d.getTime() + (exdays*24*60*60*1000));
				var expires = "expires="+d.toGMTString();
				document.cookie = cname + "=" + cvalue + "; " + expires;
			}

			function getCookie(cname) {
				var name = cname + "=";
				var ca = document.cookie.split(';');
				for(var i=0; i<ca.length; i++) {
					var c = ca[i];
					while (c.charAt(0)==' ') c = c.substring(1);
					if (c.indexOf(name) != -1) return c.substring(name.length,c.length);
				}
				return "";
			}

		})();
