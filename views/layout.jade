include mixins/navigation

doctype html
- attributes = []
if model && model.modelName
	- attributes['data-linz-model'] = model.modelName
html(lang="en")&attributes(attributes)
	head
		title= pageTitle
		meta(name='viewport', content='width=device-width, initial-scale=1.0')
		link(href='//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,400,300,600,700', rel='stylesheet', type='text/css')
		if (env === 'development')
			link(href='' + linz.get('admin path') + '/public/css/bootstrap.min.css', rel='stylesheet')
			link(href='' + linz.get('admin path') + '/public/css/font-awesome.min.css', rel='stylesheet')
		else
			link(href='//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css', rel='stylesheet')
			link(href='//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css', rel='stylesheet')
		link(href='' + linz.get('admin path') + '/public/css/multiselect.min.css', rel='stylesheet')
		link(href='' + linz.get('admin path') + '/public/css/linz.css', rel='stylesheet')
		if adminCSSFile !== undefined
			link(href='' + adminCSSFile, rel='stylesheet')
		script(src='' + linz.get('admin path') + '/public/js/utils.js')
	body
		.navbar.navbar-inverse.navbar-fixed-top.linz-navbar-inverse(role='navigation')
			.container
				.navbar-header
					button.navbar-toggle(type='button', data-linz-nav-toggle)
						span.sr-only Toggle navigation
						span.icon-bar
						span.icon-bar
						span.icon-bar
					a.navbar-brand(href=linz.get('admin path'))= linz.get('admin title')
				.navbar-right
					ul.nav.navbar-nav
						li
							a(href=linz.get('admin path') + '/logout') Logout

		nav
			ul
				each node,index in linzNavigation
					if node.children && node.children.length
						if node.href === request.path
							li(class='active')
								mixin submenu(node)
						else
							li
								mixin submenu(node)
					else
						if (node.href === request.path)
							li(class='active')
								a(href=node.href)= node.name
						else
							li
								a(href=node.href)= node.name
		.wrap
			block page
				header
					.container
						.row
							.col-xs-12
								block header
				block content

		.modal.fade.modal-linz#linzModal(tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true")

		if (env === 'development')
			script(src='' + linz.get('admin path') + '/public/js/jquery.min.js')
			script(src='' + linz.get('admin path') + '/public/js/bootstrap.min.js')
		else
			script(src='//code.jquery.com/jquery.js')
			script(src='//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js')

		script(src='' + linz.get('admin path') + '/public/js/modernizr.custom.min.js')
		script(src='' + linz.get('admin path') + '/public/js/validator.min.js')
		script(src='' + linz.get('admin path') + '/public/js/multiselect.min.js')
		script(src='' + linz.get('admin path') + '/public/js/ui.js')
		script(src='' + linz.get('admin path') + '/public/js/template.js')
		script(src='' + linz.get('admin path') + '/public/js/moment.min.js')
		script(src='' + linz.get('admin path') + '/public/ckeditor/ckeditor.js')
		script.
			CKEDITOR.replaceClass = null; // Disable replacing by class
		
		if adminJSFile !== undefined
			script(src='' + adminJSFile)

		script. linz.loadLibraries('#{linz.get('admin path')}');
		block script
